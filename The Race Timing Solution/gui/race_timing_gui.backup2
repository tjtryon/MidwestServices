# race_timing_gui.py
# Author: TJ Tryon
# Date: July 17, 2025
# The Race Timing Solution - GTK GUI Frontend
#
# This GUI interfaces with the backend race_timing_console.py to provide
# a graphical interface for managing race timing, database creation,
# runner loading, and result viewing.

import gi
import os
import datetime
from console import race_timing_console as rtc

gi.require_version("Gtk", "4.0")
from gi.repository import Gtk

class RaceTimingWindow(Gtk.ApplicationWindow):
    def __init__(self, app):
        super().__init__(application=app)
        self.set_title("The Race Timing Solution")
        self.set_default_size(400, 300)

        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10, margin_top=10, margin_bottom=10, margin_start=10, margin_end=10)
        self.set_child(vbox)

        self.create_btn("Create New Race Database", self.prompt_for_race_number, vbox)
        self.create_btn("Load Existing Race Database", self.prompt_for_existing_db, vbox)
        self.create_btn("Load Runners from CSV", self.prompt_for_csv_file, vbox)
        self.create_btn("Start Race", rtc.start_race, vbox)
        self.create_btn("Show Individual Results", rtc.show_individual_results, vbox)
        self.create_btn("Show Team Results", rtc.show_team_results, vbox)
        self.create_btn("Show All Runners", rtc.show_all_runners, vbox)
        self.create_btn("Exit", self.exit_app, vbox)

    def create_btn(self, label, callback, container):
        btn = Gtk.Button(label=label)
        btn.connect("clicked", lambda b: callback())
        container.append(btn)

    def prompt_for_race_number(self):
        entry = Gtk.Entry()
        entry.set_placeholder_text("Enter race number (e.g. 1)")

        dialog = Gtk.AlertDialog.new()
        dialog.set_title("New Race Number")
        dialog.set_message_type(Gtk.MessageType.QUESTION)
        dialog.set_child(entry)
        dialog.add_button("Cancel", Gtk.ResponseType.CANCEL)
        dialog.add_button("OK", Gtk.ResponseType.OK)

        def on_response(dlg, response):
            if response == Gtk.ResponseType.OK:
                race_number = entry.get_text().strip()
                if race_number:
                    today = datetime.datetime.today().strftime('%Y%m%d')
                    filename = f"{today}-{race_number}-race.db"
                    db_path = os.path.join("data", filename)

                    if os.path.exists(db_path):
                        overwrite_dialog = Gtk.AlertDialog.new()
                        overwrite_dialog.set_title("Overwrite?")
                        overwrite_dialog.set_message(f"{filename} already exists. Overwrite?")
                        overwrite_dialog.set_message_type(Gtk.MessageType.WARNING)
                        overwrite_dialog.add_button("Cancel", Gtk.ResponseType.CANCEL)
                        overwrite_dialog.add_button("OK", Gtk.ResponseType.OK)

                        def on_confirm_response(confirm_dlg, confirm_response):
                            if confirm_response == Gtk.ResponseType.OK:
                                rtc.DB_FILENAME = db_path
                                rtc.init_db(new_db=True)
                            confirm_dlg.destroy()

                        overwrite_dialog.connect("response", on_confirm_response)
                        overwrite_dialog.show()
                    else:
                        rtc.DB_FILENAME = db_path
                        rtc.init_db(new_db=True)
            dlg.destroy()

        dialog.connect("response", on_response)
        dialog.show()

    def prompt_for_existing_db(self):
        entry = Gtk.Entry()
        entry.set_placeholder_text("Enter database filename (in data/)")

        dialog = Gtk.AlertDialog.new()
        dialog.set_title("Load Existing Database")
        dialog.set_message_type(Gtk.MessageType.QUESTION)
        dialog.set_child(entry)
        dialog.add_button("Cancel", Gtk.ResponseType.CANCEL)
        dialog.add_button("OK", Gtk.ResponseType.OK)

        def on_response(dlg, response):
            if response == Gtk.ResponseType.OK:
                filename = entry.get_text().strip()
                if filename:
                    rtc.DB_FILENAME = os.path.join("data", filename)
                    rtc.init_db(new_db=False)
            dlg.destroy()

        dialog.connect("response", on_response)
        dialog.show()

    def prompt_for_csv_file(self):
        entry = Gtk.Entry()
        entry.set_placeholder_text("Enter CSV filename (in data/)")

        dialog = Gtk.AlertDialog.new()
        dialog.set_title("Load Runners from CSV")
        dialog.set_message_type(Gtk.MessageType.QUESTION)
        dialog.set_child(entry)
        dialog.add_button("Cancel", Gtk.ResponseType.CANCEL)
        dialog.add_button("OK", Gtk.ResponseType.OK)

        def on_response(dlg, response):
            if response == Gtk.ResponseType.OK:
                csv_file = entry.get_text().strip()
                if csv_file:
                    rtc.load_runners_from_csv(csv_file)
            dlg.destroy()

        dialog.connect("response", on_response)
        dialog.show()

    def exit_app(self):
        Gtk.Application.get_default().quit()

class RaceTimingApp(Gtk.Application):
    def __init__(self):
        super().__init__(application_id="org.midwestservices.RaceTiming")

    def do_activate(self):
        rtc.initialize_config_db()
        win = RaceTimingWindow(self)
        win.present()

app = RaceTimingApp()
app.run()
